version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: phivolcs_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs:/logs
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Flask Web Application
  web:
    build: .
    container_name: phivolcs_web
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
      - ./templates:/app/templates
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Manual Scraper Service (run with --profile scraper)
  scraper:
    build: .
    container_name: phivolcs_scraper
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: "no"  # Manual execution only
    profiles:
      - scraper
    command: ["python", "main.py"]

  # Scheduled Scraper (optional - runs every 8 hours)
  scheduler:
    build: .
    container_name: phivolcs_scheduler
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - scheduler
    command: ["python", "cron_scraper.py"]

  # Cloudflare Tunnel - Public Access
  tunnel:
    image: cloudflare/cloudflared:latest
    container_name: phivolcs_tunnel
    command: tunnel --url http://web:5000
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Persistent volumes
volumes:
  postgres_data:
    driver: local