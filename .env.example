# PHIVOLCS Earthquake Monitoring System - Environment Configuration
# Copy this file to .env and update with your actual values

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL Database Settings
DB_NAME=earthquake_db
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=earthquake_user
DB_PASSWORD=your_secure_database_password_here

# For Docker deployment, use:
# DB_HOST=db  # Docker service name

# =============================================================================
# WEB APPLICATION CONFIGURATION  
# =============================================================================

# Admin Panel Access Token (CHANGE THIS!)
# Generate secure token: python -c "import secrets; print(secrets.token_urlsafe(32))"
ADMIN_TOKEN=your_secure_admin_token_here

# Flask Configuration
FLASK_ENV=production
FLASK_DEBUG=False

# =============================================================================
# SCRAPER CONFIGURATION (Optional)
# =============================================================================

# Rate limiting for PHIVOLCS scraping (seconds between requests)
REQUEST_DELAY=1.0

# Scraper retry settings
MAX_RETRIES=3
RETRY_DELAY=2

# =============================================================================
# LOGGING CONFIGURATION (Optional)
# =============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# Log file retention (days)
LOG_RETENTION_DAYS=30

# =============================================================================
# DEPLOYMENT INSTRUCTIONS
# =============================================================================

# Local Development:
# 1. cp .env.example .env
# 2. Update DB_PASSWORD and ADMIN_TOKEN with secure values
# 3. Ensure PostgreSQL is running locally
# 4. Run: uv run python app.py

# Docker Deployment:
# 1. cp .env.example .env
# 2. Set DB_HOST=db (Docker service name)
# 3. Update passwords and tokens with secure values
# 4. Run: docker-compose up -d --build

# Production Deployment:
# 1. Use strong, unique passwords (20+ characters)
# 2. Use cryptographically secure admin token
# 3. Set FLASK_DEBUG=False
# 4. Consider firewall rules (only port 5000 exposed)

# =============================================================================
# SECURITY NOTES
# =============================================================================

# ⚠️  NEVER commit the actual .env file to version control
# ⚠️  Use different passwords for development and production
# ⚠️  Admin token should be cryptographically random
# ⚠️  Database password should be complex (letters, numbers, symbols)

# Example secure password generation:
# python -c "import secrets; print(secrets.token_urlsafe(32))"